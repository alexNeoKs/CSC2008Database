version: '3.8'

services:

  flask:
    container_name: Flask
    build:
      dockerfile: Dockerfile
      context: ./Flask
    volumes:
      - ./Flask/src:/src
    ports:
      - 3000:3000
    restart: unless-stopped
    image: flask
    depends_on:
      sql:
        condition: service_healthy
    environment:
      - WAIT_HOSTS=sql:3306
    networks:
      - localnet

  sql:
    container_name: MySQL
    build:
      dockerfile: Dockerfile
      context: ./SQL
    volumes:
      - ./SQL/mysql:/var/lib/mysql
      - ./SQL/mysql-files:/var/lib/mysql-files/
    ports:
      - 3306:3306
    restart: unless-stopped     
    image: sql
    environment:
      MYSQL_DATABASE: spotify
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: admin
      SERVICE_NAME: sql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 1s
      retries: 120
    networks:
      - localnet

  nosql:
    container_name: MongoDB
    build:
      dockerfile: Dockerfile
      context: ./NoSQL
    volumes:
      - ./NoSQL/configdb:/data/configdb
      - ./NoSQL/db:/data/db
    ports:
      - 27019:27019
    restart: unless-stopped
    image: nosql
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      SERVICE_NAME: mongodb
    networks:
      - localnet

# docker pull mongo                                    # Create the image
# docker run -d -p 27019:27019 --name MongoDB mongo    # Run the container
# docker exec -it MongoDB mongosh                      # Connect to database and display terminal to accept mongo command without credentials
# docker exec -it MongoDB mongosh -u admin -p password # Connect to database and display terminal to accept mongo command with credentials

networks:
  localnet:
    driver: bridge